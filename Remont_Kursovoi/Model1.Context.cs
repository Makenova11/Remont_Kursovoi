//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Remont_Kursovoi
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Ремонт_оборудованияEntities : DbContext
    {
        public Ремонт_оборудованияEntities()
            : base("name=Ремонт_оборудованияEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<График_плановых_техобслуживаний> График_плановых_техобслуживаний { get; set; }
        public virtual DbSet<Журнал_выполненных_ремонтов> Журнал_выполненных_ремонтов { get; set; }
        public virtual DbSet<Работник_в_ремонте> Работник_в_ремонте { get; set; }
        public virtual DbSet<Работники> Работники { get; set; }
        public virtual DbSet<Роли_работников> Роли_работников { get; set; }
        public virtual DbSet<Состояние_оборудования> Состояние_оборудования { get; set; }
        public virtual DbSet<Типы_оборудования> Типы_оборудования { get; set; }
        public virtual DbSet<Типы_ремонта> Типы_ремонта { get; set; }
        public virtual DbSet<Экземпляры_оборудований> Экземпляры_оборудований { get; set; }
        public virtual DbSet<firstjob> firstjob { get; set; }
        public virtual DbSet<ActionJob> ActionJob { get; set; }
    
        public virtual ObjectResult<big3_Result> big3(string role, Nullable<System.DateTime> dateNach1, Nullable<System.DateTime> dateNach2, Nullable<System.DateTime> dateKon1, Nullable<System.DateTime> dateKon2)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var dateNach1Parameter = dateNach1.HasValue ?
                new ObjectParameter("DateNach1", dateNach1) :
                new ObjectParameter("DateNach1", typeof(System.DateTime));
    
            var dateNach2Parameter = dateNach2.HasValue ?
                new ObjectParameter("DateNach2", dateNach2) :
                new ObjectParameter("DateNach2", typeof(System.DateTime));
    
            var dateKon1Parameter = dateKon1.HasValue ?
                new ObjectParameter("DateKon1", dateKon1) :
                new ObjectParameter("DateKon1", typeof(System.DateTime));
    
            var dateKon2Parameter = dateKon2.HasValue ?
                new ObjectParameter("DateKon2", dateKon2) :
                new ObjectParameter("DateKon2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<big3_Result>("big3", roleParameter, dateNach1Parameter, dateNach2Parameter, dateKon1Parameter, dateKon2Parameter);
        }
    
        public virtual ObjectResult<late_Result> late(Nullable<int> numRepair)
        {
            var numRepairParameter = numRepair.HasValue ?
                new ObjectParameter("NumRepair", numRepair) :
                new ObjectParameter("NumRepair", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<late_Result>("late", numRepairParameter);
        }
    
        public virtual ObjectResult<notlate_Result> notlate(Nullable<int> numRepair)
        {
            var numRepairParameter = numRepair.HasValue ?
                new ObjectParameter("NumRepair", numRepair) :
                new ObjectParameter("NumRepair", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<notlate_Result>("notlate", numRepairParameter);
        }
    
        public virtual ObjectResult<ratio_repair_Result> ratio_repair(string choice1, string choice2)
        {
            var choice1Parameter = choice1 != null ?
                new ObjectParameter("Choice1", choice1) :
                new ObjectParameter("Choice1", typeof(string));
    
            var choice2Parameter = choice2 != null ?
                new ObjectParameter("Choice2", choice2) :
                new ObjectParameter("Choice2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ratio_repair_Result>("ratio_repair", choice1Parameter, choice2Parameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Remont_Result> Remont()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Remont_Result>("Remont");
        }
    }
}
